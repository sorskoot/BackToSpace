import { createMesh } from '../utils/createMesh';

const colors = ['#00FF00', '#0000FF', '#00FFFF', '#FF0000', '#FF00FF', '#FF00FF', '#FFFF00', '#FFFF00'];
const fillcolors = ['#001100', '#000011', '#001111', '#110000', '#110011', '#110011', '#111100', '#111100'];

const verts = [[-1.0, 3.0, 1.65, -1.0, 3.0, -1.34, -1.0, 4.0, -1.34, -3.01, -1.0, -0.34, -3.0, 1.0, -0.34, -3.0, 1.0, -1.34, -1.0, -3.0, -0.34, -1.0, -3.0, -1.34, -1.0, 2.0, -0.34, -2.0, -2.0, -0.34, -2.0, -2.0, -1.34, -2.0, 2.0, -0.34, -2.0, 2.0, -1.34, -2.0, 3.0, 1.66, -2.0, 3.0, -1.34, -2.0, 4.0, -1.34, -1.0, 2.0, -1.34, 0.0, 2.0, -1.34, -4.0, 1.0, -0.34, -4.0, 0.0, -1.34, -4.0, -2.0, 0.66, -2.0, -4.0, 1.66, -3.99, 2.0, -1.34, -3.99, 0.0, -3.34, -3.99, -4.0, 0.66, -3.0, 2.0, -1.35, -3.01, 0.0, -3.34, -3.01, -4.0, 0.66, -3.01, -2.0, 0.66, -3.01, 0.0, -1.34, 0.0, -3.0, -1.34, 0.0, -3.0, -0.34, 0.0, -1.0, 1.64, 0.0, 2.0, -0.34, 1.0, 4.0, -1.34, 1.0, 3.0, -1.34, 1.0, 3.0, 1.65, 3.0, 1.0, -0.34, 3.0, 1.0, -1.34, 2.0, 2.0, -0.34, 2.0, 2.0, -1.34, 2.0, 3.0, 1.66, 2.0, 3.0, -1.34, 2.0, 4.0, -1.34, 1.0, -3.0, -0.34, 1.0, 2.0, -0.34, 1.0, 2.0, -1.34, 4.0, 1.0, -0.34, 3.99, 2.0, -1.34, 3.01, 2.0, -1.34, 4.0, -2.0, 0.66, 4.0, 0.0, -1.34, 3.01, 0.0, -1.34, 3.01, -2.0, 0.66, 3.99, 0.0, -3.34, 3.99, -4.0, 0.66, 3.01, 0.0, -3.34, 3.01, -4.0, 0.66, 2.0, -4.0, 1.66, 3.0, -1.0, -0.34, 1.0, -3.0, -1.34, 2.0, -2.0, -0.34, 2.0, -2.0, -1.34],
[3.15, 1.97, 1.16, 1.57, 0.39, -0.98, 3.15, 1.97, 2.47, 1.57, 0.39, 0.06, 3.15, 1.97, 3.1, 1.57, 0.39, 3.1, 0.79, -1.18, -2.03, 0.79, -1.85, 2.47, 0.79, -1.97, 3.1, 4.72, -1.18, 2.38, 2.36, -0.39, 0.09, 3.15, 1.97, 1.16, 4.72, -1.18, 2.47, 2.36, -0.39, 2.47, 3.94, 1.18, 2.47, 4.72, -1.18, 3.1, 2.36, -0.39, 3.1, 3.94, 1.18, 3.1, 0.0, 0.39, 3.1, 0.0, 1.97, 3.1, 2.85, 1.85, 2.97, 1.52, 0.52, 2.97, 0.12, 0.52, 2.97, 0.12, 1.85, 2.97, 4.34, -0.79, 2.98, 2.82, -0.29, 2.98, 3.83, 0.73, 2.98, 0.12, -0.91, 2.97, 0.59, -1.85, 2.97, 0.12, -1.85, 2.97, 0.0, 0.39, -3.1, 0.0, 0.39, -0.66, 0.0, -1.97, 2.47, 0.0, -1.97, -3.1, 0.0, -0.39, 3.1, 0.0, -0.39, 0.35, 0.0, -1.97, 3.1, 0.0, 3.14, -0.18, 0.0, 1.97, -3.1, -1.57, 0.39, 0.06, -3.15, 1.97, 2.47, -3.15, 1.97, 1.16, -1.57, 0.39, 3.1, -3.15, 1.97, 3.1, -0.79, -1.85, 2.47, -0.79, -1.97, 3.1, -2.36, -0.39, 2.47, -4.72, -1.18, 2.47, -4.72, -1.18, 2.38, -2.36, -0.39, 0.09, -3.94, 1.18, 2.47, -3.15, 1.97, 1.16, -2.36, -0.39, 3.1, -4.72, -1.18, 3.1, -3.94, 1.18, 3.1, -3.83, 0.73, 2.98, -4.34, -0.79, 2.98, -2.82, -0.29, 2.98, -0.12, 1.85, 2.97, -2.85, 1.85, 2.97, -1.52, 0.52, 2.97, -0.12, 0.52, 2.97, -0.12, -0.91, 2.97, -0.59, -1.85, 2.97, -0.12, -1.85, 2.97, -1.57, 0.39, -0.98, -0.79, -1.18, -2.03],
]
const faces = [[2, 1, 0, 4, 5, 11, 11, 5, 12, 13, 14, 15, 13, 2, 0, 15, 2, 13, 30, 6, 31, 8, 33, 32, 31, 6, 32, 12, 16, 8, 8, 11, 12, 14, 13, 8, 8, 16, 14, 18, 22, 25, 18, 25, 4, 20, 19, 29, 20, 29, 28, 19, 18, 4, 19, 4, 29, 23, 20, 24, 23, 19, 20, 22, 19, 23, 22, 18, 19, 26, 27, 28, 26, 28, 29, 25, 26, 29, 27, 24, 21, 24, 20, 21, 20, 28, 21, 28, 27, 21, 3, 29, 4, 6, 7, 9, 7, 10, 9, 10, 3, 9, 5, 4, 25, 7, 6, 30, 4, 11, 32, 3, 4, 32, 9, 3, 32, 11, 8, 32, 6, 9, 32, 13, 0, 33, 33, 8, 13, 1, 17, 33, 33, 0, 1, 35, 34, 36, 38, 37, 39, 38, 39, 40, 42, 41, 43, 34, 41, 36, 34, 43, 41, 44, 30, 31, 33, 45, 32, 44, 31, 32, 46, 40, 45, 39, 45, 40, 41, 42, 45, 46, 45, 42, 48, 47, 49, 49, 47, 37, 51, 50, 52, 52, 50, 53, 47, 51, 37, 37, 51, 52, 50, 54, 55, 51, 54, 50, 51, 48, 54, 47, 48, 51, 57, 56, 53, 53, 56, 52, 56, 49, 52, 55, 57, 58, 50, 55, 58, 53, 50, 58, 57, 53, 58, 52, 59, 37, 60, 44, 61, 62, 60, 61, 59, 62, 61, 37, 38, 49, 44, 60, 30, 39, 37, 32, 37, 59, 32, 59, 61, 32, 45, 39, 32, 61, 44, 32, 36, 41, 33, 45, 33, 41, 17, 35, 33, 36, 33, 35, 54, 55, 57, 56, 54, 57, 26, 27, 24, 26, 24, 23],
[3, 2, 0, 5, 4, 2, 2, 3, 5, 31, 18, 5, 33, 32, 7, 8, 34, 35, 32, 36, 8, 13, 12, 9, 9, 10, 13, 14, 13, 10, 12, 14, 11, 11, 9, 12, 16, 15, 12, 12, 13, 16, 17, 16, 13, 13, 14, 17, 15, 17, 14, 14, 12, 15, 11, 10, 9, 26, 24, 25, 37, 38, 0, 2, 4, 19, 23, 20, 21, 21, 22, 23, 27, 28, 29, 11, 3, 14, 10, 3, 14, 4, 5, 21, 21, 20, 4, 5, 18, 22, 22, 21, 5, 18, 19, 23, 23, 22, 18, 19, 4, 20, 20, 23, 19, 15, 16, 25, 25, 24, 15, 16, 17, 26, 26, 25, 16, 17, 15, 24, 24, 26, 17, 29, 28, 8, 36, 34, 27, 35, 31, 3, 3, 1, 30, 5, 3, 31, 7, 6, 33, 35, 7, 8, 8, 7, 32, 0, 2, 37, 19, 37, 2, 34, 8, 28, 28, 27, 34, 8, 36, 29, 27, 29, 36, 7, 35, 6, 6, 35, 3, 6, 3, 30, 40, 39, 41, 43, 42, 40, 39, 40, 42, 18, 31, 42, 32, 33, 44, 34, 45, 35, 36, 32, 45, 47, 46, 48, 49, 48, 46, 46, 50, 49, 50, 47, 51, 48, 51, 47, 53, 52, 47, 46, 47, 52, 52, 54, 46, 50, 46, 54, 54, 53, 50, 47, 50, 53, 49, 51, 48, 56, 55, 57, 38, 37, 41, 43, 40, 19, 59, 58, 60, 61, 60, 58, 63, 62, 64, 39, 51, 50, 39, 49, 50, 42, 43, 60, 59, 60, 43, 18, 42, 61, 60, 61, 42, 19, 18, 58, 61, 58, 18, 43, 19, 59, 58, 59, 19, 52, 53, 57, 56, 57, 53, 54, 52, 55, 57, 55, 52, 53, 54, 56, 55, 56, 54, 63, 64, 45, 34, 36, 62, 31, 35, 39, 65, 39, 30, 39, 42, 31, 66, 44, 33, 44, 35, 45, 44, 45, 32, 40, 41, 37, 37, 19, 40, 45, 34, 63, 62, 63, 34, 36, 45, 64, 64, 62, 36, 35, 44, 66, 35, 66, 39, 39, 66, 30],
]

let game;
 
export default AFRAME.registerComponent('invader', {
    schema: {
        direction: { default: 0 },
        type: { default: 1 },
        speed: { default: 5 },
        frequency: { default: 2 },
        breakChange: { default: 100 },
        amp: { default: 1 }
    },

    init: function () {
        this.tick = AFRAME.utils.throttleTick(this.tick, 1/30, this)

        game = game || document.querySelector('[game]');
        this.movement = 0;
        this.broken = false;
        const invaderType = (this.data.type - 1) % 2;
        let cube = createMesh(verts[invaderType], faces[invaderType]);
        this.el.setObject3D('mesh', cube);
        this.el.setAttribute('wireframe-material', {
            fillcolor: fillcolors[this.data.type - 1],
            color: colors[this.data.type - 1],
            thickness: 0.05
        });

        this.el.setAttribute('scale', `1.5 1.5 1.5`);

        let pos = this.el.getAttribute('position')
        let dist = Math.sqrt(pos.x * pos.x + pos.y * pos.y + pos.z * pos.z);
        this.startDist = dist;
        this.dir = { x: pos.x / dist, y: pos.y / dist, z: pos.z / dist };
        this.deltaFreq = (this.data.frequency * Math.PI * 2) / dist;
        this.orgX = pos.x;
        this.el.getObject3D('mesh').lookAt(new THREE.Vector3(0, 0, 0));
    },
    tick: function (time, timeDelta) {
        if (game.components['game'].gameover) return;
        let deltaTime = timeDelta / 1000 * this.data.speed;
        let pos = this.el.object3D.position;

        this.orgX -= this.dir.x * deltaTime;
        pos.y -= this.dir.y * deltaTime;
        pos.z -= this.dir.z * deltaTime;
        let currentDist = Math.sqrt(this.orgX * this.orgX + pos.y * pos.y + pos.z * pos.z);
        pos.x =
            (Math.sin((this.startDist * this.deltaFreq) -
                (this.deltaFreq * currentDist)) * currentDist / 10 * this.data.amp) +
            this.orgX;
        this.el.getObject3D('mesh').lookAt(0, 0, 0);

        if (currentDist < 10) {
            //this.el.parentEl.removeChild(this.el);
            this.gameover = true;
            game.emit('game-over');
        }
        if (currentDist > 10 && !this.broken) {
            if (Math.random() * 1000000 <= this.data.breakChange) {
                this.broken = true;
                this.data.speed *= 2;
                this.data.frequency *= 4;
                this.data.amp *= 5;
            }
        }
    },
    getColor: function () {
        return colors[this.data.type - 1];
    }
});

